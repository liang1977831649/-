#include<stdio.h>
#include<stdlib.h>
#define typename char

//创建节点机构
struct Node {
	typename date;
	struct Node *child, *brother;
};
struct Stacknode {
	struct Node *arry;
	int top;
	int capacity;
};
//初始化栈
void StackInit(Stacknode* SN) {
	SN->arry = (struct Node*)malloc(4 * sizeof(struct Node));
	SN->top = 0;
	SN->capacity = 4;
	printf("已初始化！\n");
}
//进入栈
void Pushstack(struct Stacknode* SN, struct Node node) {
	//判容操作
	//扩容
	if (SN->capacity == SN->top) {
		SN->arry = (struct Node*)realloc(SN->arry,(SN->capacity)*2*sizeof(struct Node));
	}
	SN->arry[(SN->top)++] = node;
}
//出栈
void Outstack(Stacknode* SN) {
	--(SN->top);
}
//取栈顶元素
struct Node* Topstack(struct Stacknode* SN) {
	return &(SN->arry[SN->top - 1]);
}
Node* Creatnode(char* arr, int *pos) {
	if (arr[*pos] != '#') {
		//申请空间
		Node* root = (struct Node*)malloc(sizeof(struct Node));
		root->date = arr[*pos];
		(*pos)++;
		root->child = Creatnode(arr,pos);
		(*pos)++;
		root->brother = Creatnode(arr, pos);
		return root;
	}
	else {
		return NULL;
	}
}
//层次遍历与栈
void Findrecursion(struct Stacknode* SN, Node* root, char* str,int*flag) {
	if (root) {
		if (root->date == *str) {
			*flag = 1;
		}
		if (root->child&&*flag == 0) {//左边不为空的话
			//入栈
			Pushstack(SN, *root);
			Findrecursion(SN, root->child, str, flag);
			if (*flag == 1)return;//从这里出来验证flag
		}
		if (root->brother&&*flag == 0) {//因为右边是兄弟，所以不入栈
			Findrecursion(SN, root->brother, str, flag);
			if (*flag == 1)return;//从这里出来验证flag
			//出栈
			Outstack(SN);//从左右边出来的指针要出栈，以保证父亲是上一级.
		}
	}
}

//找父亲节点
void Findfather(Stacknode* SN, Node* root) {
	char str;
	int flag = 0;
	printf("输入节点：");
	scanf_s("%c", &str,1);
	if (str == 'R') {
		printf("%c没有父节点!\n", str);
		return;
	}
	Findrecursion(SN, root, &str,&flag);
	if (flag == 1) {
		printf("%c的父节点是%c!", str, SN->arry[SN->top - 1].date);
		return;
	}
	printf("无法查询，%c不在树中!\n", str);
	
}
//定位到父亲
void Location(Node* root,char* str,int* flag,Stacknode* SN) {
	Pushstack(SN, *root);
	if (*str == root->date) {
		*flag = 1;
	}
	if (*flag == 1)return;
	if (root->child&&*flag==0) {
		Location(root->child, str, flag, SN);
		if (*flag == 1)return;
	}
	if (root->brother&&*flag == 0) {
		Location(root->brother, str, flag, SN);
		if (*flag == 1)return;
	}
}
//打印孩子
void Printchild(Node* pos) {
	if (pos) {
		printf("该节点的孩子是：%c\n", pos->date);
		Printchild(pos->brother);
	}
}
//打印父亲的孩子
void Findchild(Node* root,Stacknode* SN) {
	//清空栈
	SN->top = 0;
	char str;
	int flag = 0;
	printf("请输入父子节点：");
	scanf_s("%c", &str, 1);
	Location(root, &str,&flag,SN);
	if (flag == 0) {
		printf("没有该元素或\n");
	}
	Node* pos = &(SN->arry[SN->top - 1]);//定位到该节点
	if (pos->child) {
		Printchild(pos->child);//打印该节点的孩子
	}
	else {
		printf("%c没有孩子！\n", pos->date);
	}
}
void Numbernode(Node* root, int* num) {
	if (root) {
		(*num)++;
		Numbernode(root->child, num);
		Numbernode(root->brother, num);
	}
}
void Print(Node* root) {
	if (root) {
		printf("%c ", root->date);
		Print(root->brother);
		Print(root->child);
	}
}
//赵节点的子孙
void Numberoffspring(Node* root,Stacknode* SN) {
	//先定位
	//清空栈
	SN->top = 0;
	char str;
	int flag = 0,number=0;
	printf("你要计算的子孙后代是：");
	scanf_s("%c", &str, 1);
	Location(root, &str, &flag, SN);
	Node* pos=&(SN->arry[SN->top-1]);
	Numbernode(pos->child,&number);
	printf("%c的后代个数是：%d", str, number);
}
void Menu() {
	printf("-------------------1.创建节点--------------------\n");
	printf("-------------------2.寻找某节点的所有孩子-------\n");
	printf("-------------------3.寻找某节点的父亲-----------\n");
	printf("-------------------4.所有结点的个数--------------\n");
	printf("-------------------5.打印所有节点----------------\n");
	printf("-------------------6.寻找某节点的所有子代--------\n");
	printf("-------------------7.打印菜单--------------------\n");
	printf("-------------------8.退出程序--------------------\n");
}
int main() {
	int pos=0;
	char arr[50];
	gets_s(arr);
	Stacknode SN;
	Node* root=Creatnode(arr, &pos);
	StackInit(&SN);
	printf("创建成功！\n");
	int input;
	while (true)
	{
		scanf("%d", &input);
		switch(input){
		case 1:
			root = Creatnode(arr, &pos);
			break;
		case 2:
			Findchild(root, &SN);
			break;
		case 3:
			Findfather(&SN, root);
			break;
		case 4:
			int num = 0;
			Numbernode(root, &num);
			break;
		case 5:
			Print(root);
			printf("\n");
			break;
		case 6:
			Numberoffspring(root, &SN);
			break;
		case 7:
			Menu();
			break;
		case 8:
			printf("程序已推出！\n");
			exit(-1);
			break;
		}
	}
}
//RAD#E##B#CFG#H#K#####