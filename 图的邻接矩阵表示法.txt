#include<stdio.h>
#include<stdlib.h>
//图的邻接矩阵表示法
//带权重
#define MAX 10
struct Graph{
	int vertices[MAX];//顶点的信息
	int edge[MAX][MAX];//边的二维矩阵
	int numV;//顶点的个数
	int numE;//顶点间边的数目
};
void Graph_init(Graph* G) {
	G->numE = G->numV = 0;
}
void Graph_creat2(Graph* G) {
	int j;
	for (int i = 0; i < G->numV; i++) {
		for (j = 0; j < G->numV; j++) {
			G->edge[i][j] = 0;
		}
	}
}
void Findindex(int* x, int* y, int* ix, int* iy, struct Graph* G) {
	*ix = -1;
	*iy = -1;
	for (int i = 0; i < G->numV; i++) {
		if (G->vertices[i] == *x) {
			*ix = i;
		}
		else if (G->vertices[i] == *y) {
			*iy = i;
		}
		if (*ix != -1 && *iy != -1) {
			break;
		}
	}
}
void Graph_connect(Graph* G) {
out:
	while (true) {
		int x, y, w, ix, iy;
		printf("输入两个节点与边的信息（空格间隔开,-1-1-1表示结束）：");
		scanf_s("%d%d%d", &x, &y, &w);
		if (x == -1) {
			break;
		}
		int j;
		Findindex(&x, &y, &ix, &iy, G);
		for (int i = 0; i < G->numV; i++) {
			if (i == ix) {
				//上三角矩阵只对上半部分检索，所以j要从i开始
				for (j = 0; j < G->numV; j++) {
					if (j == iy) {
						//复制
						G->edge[ix][iy] = 1;
						G->edge[iy][ix] = 1;
						G->numE++;
						goto out;
					}
				}
			}
		}
	}
}
void Graph_creat(Graph* G) {
	printf("输入图的顶点的个数:");
	scanf_s("%d", &(G->numV));
	Graph_creat2(G);
	for (int i = 0; i < G->numV; i++) {
		printf("输入顶点信息：");
		scanf_s("%d", &(G->vertices[i]));
	}
	printf("\n");
	int flag = 0;
	Graph_connect(G);
}//创建
void Graph_print(Graph*G) {
	printf("EXCEL:\n");
	printf("  ");
	for (int i = 0; i < G->numV; i++) {
		printf("%d ", G->vertices[i]);
	}
	printf("\n");
	for (int i = 0; i < G->numV; i++) {
		printf("%d ", G->vertices[i]);
		for (int j = 0; j < G->numV; j++) {
			printf("%d ", G->edge[i][j]);
		}printf("\n");
	}
}//打印
void Graph_add(Graph* G) {
	if (G->numV >= MAX) {
		printf("空间不足，无法实现！");
		return;
	}
	int date;
	printf("输入你要插入的数：");
	scanf_s("%d", &date);
	for (int i = 0; i < G->numV; i++) {
		if (date == G->vertices[i]) {
			printf("已存在数，不可添加！\n");
		}
	}
	printf("G->numV=%d", G->numV);
	//将第六行和列置零
	G->numV++;
	for (int i = 0; i <= G->numV; i++) {
		G->edge[(G->numV)-1][i] = 0;
		G->edge[i][(G->numV)-1] = 0;
	}
	G->vertices[G->numV-1] = date;
	printf("请输入边的关系：\n");
	Graph_connect(G);
	printf("已添加！\n");
}//增加节点或边
int Graph_edge(Graph* G) {
	int x, y, ix, iy;
	printf("请输入两个数据：");
	scanf_s("%d%d", &x, &y);
	Findindex(&x, &y, &ix, &iy, G);
	if (G->edge[ix][iy]) {
		return 1;
	}return 0;
}//判断是否有边
void Graph_removeal(struct Graph* G) {
	int date,index;
	printf("请输入要删除的顶点：");
	scanf_s("%d", &date);
	for (int i = 0; i < G->numV; i++) {
		if (i == G->numV&&date != G->vertices[i]) {
			printf("定点不存在!\n");
			return;
		}
		else if(date==G->vertices[i]){
			index = i;
			break;
		}
	}
	//现移动列，i代表列
	for (int i = index + 1; i < G->numV; i++) {
		for (int j = 0; j < G->numV; j++) {
			G->edge[j][i - 1] = G->edge[j][i];
		}
	}
	Graph_print(G);
	//再移动行
	for (int i = index + 1; i < G->numV; i++) {
		for (int j = 0; j < G->numV; j++) {
			G->edge[i-1][j] = G->edge[i][j];
		}
	}
	Graph_print(G);
	//移动一维数组
	for (int i = index+1; i < G->numV; i++) {
		G->vertices[i - 1] = G->vertices[i];
	}
	G->numV--;
}
int main() {
	struct Graph G;
	Graph_init(&G);//格式化表格
	Graph_creat(&G);//创建图
	Graph_print(&G);//打印图
	printf("%d\n",Graph_edge(&G));
	Graph_add(&G);//增加顶点
	Graph_print(&G);
	Graph_removeal(&G);//删除顶点
	Graph_print(&G);
	return 0;
}